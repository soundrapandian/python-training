1)
[do_something(x) for x in another_list]
is same as
new_list = [] 
for x in another_list:
  new_list.append(do_something(x))
return new_list
- logically split to make code understandable
- favour it only for small and finate lists keeping performance in mind
Similarly from dict
{key:value for key,value from something}

2)
1 < 2 < 3 < 4
^ this works!

3)
use global keyword to assign new value to global variables in local block

4)
yield - generators
- in a function yield returns the value and continues execution till next yield
- next(that_generator_function) will get value from yield
>>> def simple_generator_function():
>>>    yield 1
>>>    yield 2
>>>    yield 3
>>> our_generator = simple_generator_function()
>>> next(our_generator)
1
>>> next(our_generator)
2
>>> next(our_generator)
3
- Can have finite or infinite loop to return required sequence of values

5) zip function
a= ['a','b','c']
b= [1,2,3]
for x in zip(a, b):
  print x
  
this will print
('a', 1)
('b', 2)
('c', 3)


6) 
setter and getter for a property, to do some custom operation. Here "value" is the property
@property
def value(self):
    return 0
    
@value.setter
def set_value(self, val):
    self.possibilities = [val]
    
methods are called when we set or get <object>.value
for 2.7 it should be like following
class C(object):
    def __init__(self):
        self._x = None

    @property
    def x(self):
        """I'm the 'x' property."""
        return self._x

    @x.setter
    def x(self, value):
        self._x = value

    @x.deleter
    def x(self):
        del self._x